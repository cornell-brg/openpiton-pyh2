//========================================================================
// vcat configuration file to generate testbench from .vcd
//========================================================================

// Hierachical name of the module instance
TOP.noc_axi4_bridge
// testbench/modulGeneration
testbench
// module header
module noc_axi4_bridge (
    // Clock + Reset
    .clk( clk ),
    .rst_n( rst_n ),
    .reset( reset ),
    .uart_boot_en( uart_boot_en ),
    .phy_init_done( phy_init_done ),

    // Noc interface
    .src_bridge_vr_noc2_val( src_bridge_vr_noc2_val ),
    .src_bridge_vr_noc2_dat( src_bridge_vr_noc2_dat ),
    .src_bridge_vr_noc2_rdy( src_bridge_vr_noc2_rdy ),
    .bridge_dst_vr_noc3_val( bridge_dst_vr_noc3_val ),
    .bridge_dst_vr_noc3_dat( bridge_dst_vr_noc3_dat ),
    .bridge_dst_vr_noc3_rdy( bridge_dst_vr_noc3_rdy ),

    // AXI interface
    .m_axi_awid ( m_axi_awid ),
    .m_axi_awaddr ( m_axi_awaddr ),
    .m_axi_awlen ( m_axi_awlen ),
    .m_axi_awsize ( m_axi_awsize ),
    .m_axi_awburst ( m_axi_awburst ),
    .m_axi_awlock ( m_axi_awlock ),
    .m_axi_awcache ( m_axi_awcache ),
    .m_axi_awprot ( m_axi_awprot ),
    .m_axi_awqos ( m_axi_awqos ),
    .m_axi_awregion ( m_axi_awregion ),
    .m_axi_awuser ( m_axi_awuser ),
    .m_axi_awvalid ( m_axi_awvalid ),
    .m_axi_awready ( m_axi_awready ),

    .m_axi_wid( m_axi_wid ),
    .m_axi_wdata( m_axi_wdata ),
    .m_axi_wstrb( m_axi_wstrb ),
    .m_axi_wlast( m_axi_wlast ),
    .m_axi_wuser( m_axi_wuser ),
    .m_axi_wvalid( m_axi_wvalid ),
    .m_axi_wready( m_axi_wready ),

    .m_axi_arid( m_axi_arid ),
    .m_axi_araddr( m_axi_araddr ),
    .m_axi_arlen( m_axi_arlen ),
    .m_axi_arsize( m_axi_arsize ),
    .m_axi_arburst( m_axi_arburst ),
    .m_axi_arlock( m_axi_arlock ),
    .m_axi_arcache( m_axi_arcache ),
    .m_axi_arprot( m_axi_arprot ),
    .m_axi_arqos( m_axi_arqos ),
    .m_axi_arregion( m_axi_arregion ),
    .m_axi_aruser( m_axi_aruser ),
    .m_axi_arvalid( m_axi_arvalid ),
    .m_axi_arready( m_axi_arready ),

    .m_axi_rid( m_axi_rid ),
    .m_axi_rdata( m_axi_rdata ),
    .m_axi_rresp( m_axi_rresp ),
    .m_axi_rlast( m_axi_rlast ),
    .m_axi_ruser( m_axi_ruser ),
    .m_axi_rvalid( m_axi_rvalid ),
    .m_axi_rready( m_axi_rready ),

    .m_axi_bid( m_axi_bid ),
    .m_axi_bresp( m_axi_bresp ),
    .m_axi_buser( m_axi_buser ),
    .m_axi_bvalid( m_axi_bvalid ),
    .m_axi_bready( m_axi_bready )
);

    // Clock + Reset
    input                                   clk;
    input                                   rst_n;
    input                                   reset;
    input                                   uart_boot_en;
    input                                   phy_init_done;

    // Noc interface
    input                                    src_bridge_vr_noc2_val;
    input  [`NOC_DATA_WIDTH-1:0]             src_bridge_vr_noc2_dat;
    output                                   src_bridge_vr_noc2_rdy;
    output                                   bridge_dst_vr_noc3_val;
    output [`NOC_DATA_WIDTH-1:0]             bridge_dst_vr_noc3_dat;
    input                                    bridge_dst_vr_noc3_rdy;

    // AXI interface
    output [`AXI4_ID_WIDTH     -1:0]    m_axi_awid;
    output [`AXI4_ADDR_WIDTH   -1:0]    m_axi_awaddr;
    output [`AXI4_LEN_WIDTH    -1:0]    m_axi_awlen;
    output [`AXI4_SIZE_WIDTH   -1:0]    m_axi_awsize;
    output [`AXI4_BURST_WIDTH  -1:0]    m_axi_awburst;
    output                              m_axi_awlock;
    output [`AXI4_CACHE_WIDTH  -1:0]    m_axi_awcache;
    output [`AXI4_PROT_WIDTH   -1:0]    m_axi_awprot;
    output [`AXI4_QOS_WIDTH    -1:0]    m_axi_awqos;
    output [`AXI4_REGION_WIDTH -1:0]    m_axi_awregion;
    output [`AXI4_USER_WIDTH   -1:0]    m_axi_awuser;
    output                              m_axi_awvalid;
    input                               m_axi_awready;

    output [`AXI4_ID_WIDTH     -1:0]    m_axi_wid;
    output [`AXI4_DATA_WIDTH   -1:0]    m_axi_wdata;
    output [`AXI4_STRB_WIDTH   -1:0]    m_axi_wstrb;
    output                              m_axi_wlast;
    output [`AXI4_USER_WIDTH   -1:0]    m_axi_wuser;
    output                              m_axi_wvalid;
    input                               m_axi_wready;

    output [`AXI4_ID_WIDTH     -1:0]    m_axi_arid;
    output [`AXI4_ADDR_WIDTH   -1:0]    m_axi_araddr;
    output [`AXI4_LEN_WIDTH    -1:0]    m_axi_arlen;
    output [`AXI4_SIZE_WIDTH   -1:0]    m_axi_arsize;
    output [`AXI4_BURST_WIDTH  -1:0]    m_axi_arburst;
    output                              m_axi_arlock;
    output [`AXI4_CACHE_WIDTH  -1:0]    m_axi_arcache;
    output [`AXI4_PROT_WIDTH   -1:0]    m_axi_arprot;
    output [`AXI4_QOS_WIDTH    -1:0]    m_axi_arqos;
    output [`AXI4_REGION_WIDTH -1:0]    m_axi_arregion;
    output [`AXI4_USER_WIDTH   -1:0]    m_axi_aruser;
    output                              m_axi_arvalid;
    input                               m_axi_arready;

    input  [`AXI4_ID_WIDTH     -1:0]    m_axi_rid;
    input  [`AXI4_DATA_WIDTH   -1:0]    m_axi_rdata;
    input  [`AXI4_RESP_WIDTH   -1:0]    m_axi_rresp;
    input                               m_axi_rlast;
    input  [`AXI4_USER_WIDTH   -1:0]    m_axi_ruser;
    input                               m_axi_rvalid;
    output                              m_axi_rready;

    input  [`AXI4_ID_WIDTH     -1:0]    m_axi_bid;
    input  [`AXI4_RESP_WIDTH   -1:0]    m_axi_bresp;
    input  [`AXI4_USER_WIDTH   -1:0]    m_axi_buser;
    input                               m_axi_bvalid;
    output                              m_axi_bready;
